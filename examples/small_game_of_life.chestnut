parallel Int game_of_life(Int2d element) {
  Int neighbor_count = element.northWest + element.north + element.northEast +
                       element.west      + 0             + element.east +
                       element.southWest + element.south + element.southEast;
  Int state;
  Int alive = element.center;

  if (alive) {
    if (neighbor_count <= 1) {
      state = 0; // dies from loneliness
    } else if (neighbor_count >= 4) {
      state = 0; // dies from overpopulation
    } else {
      state = 1; // lives
    }
  } else { // if dead
    if (neighbor_count == 3) {
      state = 1; // perfect conditions
    } else {
      state = 0; // stays dead
    }
  }
  return state;  
}

parallel Color do_nothing(Color value) {
  return value;
}

IntArray2d life_data[90, 60];
ColorArray2d life_display[720, 480];

// Initialize to 30% 1s
foreach cell in life_data
  cell = (random() < 0.25);
end

// Run 10,000 iterations of this game of life
for (Int i=0; i<10000; i+=1) {

  foreach cell in life_data
    cell = game_of_life(cell);
  end

  foreach pixel in life_display
    if (pixel.x/8 == 0 || pixel.y/8 == 0) {
      pixel.red = 127;
      pixel.green = 127;
      pixel.blue = 127;
      pixel.opacity = 255;
    } else {
      pixel.red = 0;
      pixel.green = life_data[pixel.x/8, pixel.y/8] * 255;
      pixel.blue = 0;
      pixel.opacity = 255;
    }
  end

  display(life_display, do_nothing);
}



