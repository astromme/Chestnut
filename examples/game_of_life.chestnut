parallel Integer convert_to_0_1(Integer2d element) {
  return element.center == 1;
}

// chestnut game of life implementation
parallel Integer game_of_life(Integer2d element) {
  Integer neighbor_count = element.topLeft    + element.top       + element.topRight +
                           element.left       + 0                 + element.right +
                           element.bottomLeft + element.bottom    + element.bottomRight;
  Integer state;
  Integer alive = element.center;

  if (alive) {
    if (neighbor_count <= 1) {
      state = 0; // dies from loneliness
    } else if (neighbor_count >= 4) {
      state = 0; // dies from overpopulation
    } else {
      state = 1; // lives
    }
  } else { // if dead
    if (neighbor_count == 3) {
      state = 1; // perfect conditions
    } else {
      state = 0; // stays dead
    }
  }
  return state;  
}

parallel Color green_convert(Integer2d array) {
  Color c;
  c.red = 0;
  c.green = array.center * 255;
  c.blue = 0;
  c.alpha = 255;
  return c;
}

// 2d data array of width 1000, height 500 for storage
Integer2d life_data[1000, 500];

// Initialize to either 0 or 1
life_data = :random(0, 20); 
life_data = life_data.each(:convert_to_0_1(life_data));

Integer iteration = 0;
Integer iterations = 10000;
// Run 10,000 iterations of this game of life
while (iteration < iterations) {
  life_data = life_data.each(:game_of_life(life_data)); // Parallel function call
  display(life_data, green_convert);

  iteration = iteration + 1;
}


