parallel int convert_to_0_1(window element) {
  return element.center == 1;
}

// chestnut game of life implementation
parallel int game_of_life(window element) {
  int neighbor_count = element.topLeft    + element.top       + element.topRight +
                       element.left       + 0                 + element.right +
                       element.bottomLeft + element.bottom    + element.bottomRight;
  int state;
  int alive = element.center;

  if (alive) {
    if (neighbor_count <= 1) {
      state = 0; // dies from loneliness
    } else if (neighbor_count >= 4) {
      state = 0; // dies from overpopulation
    } else {
      state = 1; // lives
    }
  } else { // if dead
    if (neighbor_count == 3) {
      state = 1; // perfect conditions
    } else {
      state = 0; // stays dead
    }
  }
  return state;  
}

parallel int convert_color(window array) {
  return array.center * 255;
}

// 2d data array of width 1000, height 500 for storage
int2d life_data[1000, 500];
int2d life_display[1000, 500];

// Initialize to either 0 or 1
life_data = :random(0, 20); 
life_data = :convert_to_0_1(life_data);

int iteration = 0;
int iterations = 10000;
// Run 10,000 iterations of this game of life
while (iteration < iterations) {
  life_data = :game_of_life(life_data); // Parallel function call
  life_display = :convert_color(life_data);
  display(life_display);

  iteration = iteration + 1;
}


