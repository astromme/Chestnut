parallel Int game_of_life(IntWindow2d element) {
  Int neighbor_count = element.topLeft    + element.top       + element.topRight +
                       element.left       + 0                 + element.right +
                       element.bottomLeft + element.bottom    + element.bottomRight;
  Int state;
  Int alive = element.center;

  if (alive) {
    if (neighbor_count <= 1) {
      state = 0; // dies from loneliness
    } else if (neighbor_count >= 4) {
      state = 0; // dies from overpopulation
    } else {
      state = 1; // lives
    }
  } else { // if dead
    if (neighbor_count == 3) {
      state = 1; // perfect conditions
    } else {
      state = 0; // stays dead
    }
  }
  return state;  
}

parallel Color green_convert(Int value) {
  Color c;
  c.red = 0;
  c.green = value * 255;
  c.blue = 0;
  c.opacity = 255;
  return c;
}

// 2d data array of width 1000, height 500 for storage
IntArray2d life_data[1000, 500];

// Initialize to 30% 1s
foreach cell! in life_data
  cell = (random() < 0.25);
end

// Run 10,000 iterations of this game of life
Int iteration = 0;
while (iteration < 10000) {
  foreach cell! in life_data
    cell = game_of_life(window(cell));
  end

  display(life_data, green_convert);

  iteration = iteration + 1;
}


