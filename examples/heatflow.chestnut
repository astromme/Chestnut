parallel Real heat(Real data, Point2d location, Int timestep) {
  //timestep = timestep / 10;
  //Int xmin = timestep % parallel.width;
  //Int xmax = (timestep + 10) % parallel.width;
  //Int ymin = timestep % parallel.height;
  //Int ymax = (timestep + 10) % parallel.height;

  Int xmin = 50;
  Int xmax = 150;
  Int ymin = 50;
  Int ymax = 60;

  if ((location.x < xmax) && (location.x > xmin) && (location.y < ymax) && (location.y > ymin)) {
    return 1;
  }
  
  xmin = 65;
  xmax = 70;
  ymin = 65;
  ymax = 70;

  if ((location.x < xmax) && (location.x > xmin) && (location.y < ymax) && (location.y > ymin)) {
    return 0;
  }

  return data;
}

parallel Real heat_flow(RealWindow2d data, Real c0, Real c1) {
  Real new_data = c0*data.center;
  new_data = new_data + c1*(data.west + data.east + data.north + data.south);

  new_data = min(1.0, new_data);
  return max(0.0, new_data);
}

parallel Color convert_color(Real value) {
  Color output;

  if (value == 1) {
    output.red = output.blue = output.green = 255;
    output.opacity = 255;
  } else {
    output.red = value*255;
    output.green = 0;
    output.blue = 0;
    output.opacity = 255;
  }

  return output;
}

Real kappa = 0.2;
Real delta_t = 1;
Real delta_x = 1;

Real c0 = 1 - 4 * kappa * delta_t / delta_x;
Real c1 = kappa * delta_t / delta_x;

RealArray2d heat_data[500, 250];

foreach point in heat_data
  point = 0;
end

Int iteration = 0;
while (iteration < 10000) {

  foreach point in heat_data
    point = heat_flow(window(point), c0, 1);
    point = heat(point, location(point), iteration);
  end

  display(heat_data, convert_color);

  iteration = iteration + 1;
}



