// Originally from https://github.com/naoyam/physis/blob/develop/examples/diffusion/diffusion3d_physis.c
Real pi = 3.1415926535897932384626;

Int N = 64;

//Int nx = NX;
//Int ny = NX;
//Int nz = NX;

RealArray3d grid[64, 64, 64];

Int count = 0;
Real time = 0;

Real l = 1.0;
Real kappa = 0.1;

Real dx;
Real dy;
Real dz;
dx = dy = dz = l/N;

Real kx;
Real ky;
Real kz;
kx = ky = kz = 2.0 * pi;

Real dt = 0.1*dx*dx / kappa;

print('Time delta is %s', dt);

Real ce = kappa*dt/(dx*dx); // constant east
Real cw = kappa*dt/(dx*dx); // constant west
Real cn = kappa*dt/(dy*dy); // constant north
Real cs = kappa*dt/(dy*dy); // constant south
Real ca = kappa*dt/(dz*dz); // constant above
Real cb = kappa*dt/(dz*dz); // constant below
Real cc = 1.0 - (ce + cw + cn + cs + ca + cb);

print("dx,y,z: %s, %s, %s\nkx,y,z: %s, %s, %s\nce: %s\ncw: %s\ncn: %s\ncs: %s\nca: %s\ncb: %s\ncc: %s\n", dx, dy, dz, kx, ky, kz, ce, cw, cn, cs, ca, cb, cc);

sequential RealArray3d initialize(RealArray3d array, Real kappa,
                          Real kx, Real ky, Real kz,
                          Real dx, Real dy, Real dz,
                          Real time) {
    Real ax = exp(-kappa*time*(kx*kx));
    Real ay = exp(-kappa*time*(ky*ky));
    Real az = exp(-kappa*time*(kz*kz));

    // Initialize the array
    foreach element in array
        Real x = dx*(location(element).x+0.5);
        Real y = dy*(location(element).y+0.5);
        Real z = dz*(location(element).z+0.5);

        element = 0.125
                  * (1.0 - ax*cos(kx*x))
                  * (1.0 - ay*cos(ky*y))
                  * (1.0 - az*cos(kz*z));

    end
    return array;
}

sequential Real accuracy(RealArray3d experimental, RealArray3d answer) {
    RealArray3d squared_errors[64, 64, 64];

    foreach error in squared_errors, e in experimental, a in answer
        error = (e-a) * (e-a);
    end

    return sqrt(reduce(squared_errors)/squared_errors.length);
}

grid = initialize(grid, kappa, kx, ky, kz, dx, dy, dz, time);

parallel Color green(Real input) {
  Color c;
  c.red = 0;
  c.green = input*1024*1024;
  c.blue = 0;
  c.opacity = 255;
  return c;
}

//display(grid, green);
print("Average of the grid is %s", reduce(grid)/grid.length);
display(grid, green);

// Run the diffusion kernel
while (time + 0.5*dt < 0.1) { 
    if (count && (count % 100 == 0)) {
      print("time(%s)=%s", count, time + dt);
    }

    foreach element in grid
        Int x = location(element).x;
        Int y = location(element).y;
        Int z = location(element).z;

        RealWindow3d win = window(element);
        
        Real west; Real east; Real south; Real north; Real below; Real above;

        if (x == 0)             { west  = cw*win.center; } else { west  = cw*win.west; }
        if (x == grid.width-1)  { east  = ce*win.center; } else { east  = ce*win.east; }
        if (y == 0)             { north = cn*win.center; } else { north = cn*win.north; }
        if (y == grid.height-1) { south = cs*win.center; } else { south = cs*win.south; }
        if (z == 0)             { above = ca*win.center; } else { above = ca*win.above; }
        if (z == grid.depth-1)  { below = cb*win.center; } else { below = cb*win.below; }

        //element = win.center;

        element = cc*win.center + west + east + north + south + above + below;
        //element = 0.9 * win.center + west;

    end

    //print("Average of the grid is %s", reduce(grid)/grid.length);

    time = time + dt;
    count = count + 1;
}

RealArray3d answer[64, 64, 64];
answer = initialize(answer, kappa, kx, ky, kz, dx, dy, dz, time);


RealArray2d grid_display[64, 64];
RealArray2d answer_display[64, 64];

foreach grid_pixel in grid_display, answer_pixel in answer_display
  Point2d pos = location(grid_pixel);
  grid_pixel = grid[pos.x, pos.y, 0];
  answer_pixel = answer[pos.x, pos.y, 0];
end

display(grid_display, green);
display(answer_display, green);

print("error was %s", accuracy(grid, answer));
print("Average of the grid is %s", reduce(grid)/grid.length);
print("Average of the answer is %s", reduce(answer)/answer.length);

