@article{scratch,
   author = {Mitchel Resnick and John Maloney and Andr\'{e} Monroy-Hern\'{a}ndez and Natalie Rusk and Evelyn Eastmond and Karen Brennan and Amon Millner and Eric Rosenbaum and Jay Silver and Brian Silverman and Yasmin Kafai},
   title = {{Scratch: Programming for All}},
   journal = {Communications of the ACM},
   volume = {52},
   number = {11},
   month = {November},
   year = {2009},
   annote = "
     Scratch is a programming language developed at MIT that provides an appealing graphical environment aimed at introducing programming to 8-16 year olds. Familiar programming constructs like conditionals and loops are present, but are presented in an intuitive manner. The authors hold that the ``computational thinking'' that programming affords is a valuable tool that should be encouraged but is currently lacking. Most children's digital fluency is defined by ``reading'' but not ``writing.'' The article discusses some of the design decisions that went into the language. To make the language appeal to their target, the authors wanted Scratch to be more tinkerable, meaningful, and social. Additionally, we can think of any language as having a ``low floor'' (easy to begin), ``high ceiling'' (ability to become more complex), and ``wide walls'' (support for a diverse range of projects). Scratch appropriately focuses on the low floor and wide walls, arguing that a higher ceiling is outside the scope of a learning language, and if students are interesting in ``raising the ceiling'' they can and should look to more established languages like C or Python. \\ \\

     This article raises some important questions that we need to consider as we design our own language. What is the level of the floor and ceiling? How wide are the walls to be? Scratch's design is very heavily influenced by a target audience. We need to consider our target audience carefully and make sure that our language is appealing. Our project will not be an introductory language to programming as a whole, but will rather be targeted at people with some programming experience who have never ventured into the world of general purpose graphics processing.
     "
}

@article{2ndNatLang,
  author = {Stephanie A. Robertson and Martin P. Lee},
  title = {{The Application of Second Natural Language Acquisition Pedagogy to the Teaching of Programming Languages -- A Research Agenda}},
  journal = {SIGCSE Bulletin},
  volume = {27},
  number = {4},
  month = {December},
  year = {1995},
  annote = "
    The authors of this paper argue that teaching a second natural language and teaching a first programming language are not as different as one might suspect. While much research has gone into how best to communicate the syntax and semantics contained in a natural language, teaching programming languages is sorely in need of such instruction. Central to that argument is a concentration on writing code over reading it. A large and important part of learning a natural language is an ability to read, digest, and internalize the information being presented. So, the authors write, we must teach our students to read the code as well as write it. \\ \\

    Though we are in the business of {\em writing} a language, we need to place high value on the {\em readability} of our language. This is, after all, intended to be a teaching language and we want it to be accessible to our audience. By reinforcing the message that reading existing code is important we can help train our users to really get a grasp of the concepts at work.
    "
}

