// Chestnut Grammer version 1

Program -> epsilon
           DeclarationList

DeclarationList -> DataDeclaration
                   VariableDeclaration
                   FunctionDeclaration
                   DataDeclaration , DeclarationList
                   VariableDeclaration , DeclarationList
                   FunctionDeclaration , DeclarationList

DataDeclaration -> DataType id ( width , height ) DataDeclarationEnd ;
                   DataType id DataDeclarationEnd ;

DataDeclarationEnd -> epsilon
                      = Expression

VariableDeclaration -> Type id ;
                       Type id = Expression ;

FunctionDeclaration -> 'function' id ( OptionalParameterDeclarations ) Block

width -> num
height -> num

Type -> 'integer' | 'real'
DataType -> 'integer2d' | 'real2d'

OptionalParameterDeclarations -> epsilon
                                 ParameterDeclarationList

ParameterDeclarationList -> ParameterDeclaration
                            ParameterDeclaration , ParameterDeclarationList

ParameterDeclaration -> Type id

Block -> { OptionalBlockContents }

OptionalBlockContents -> epsilon
                         BlockContents

BlockContents -> VariableDeclaration
                 VariableDeclaration BlockContents
                 Statement
                 Statement BlockContents

Statement -> ;
             Expression ;
             'return' Expression ;
             'break' ;
             'if' ( Expression ) Statement else Statement
             'while' ( Expression ) Statement
             Block

Expression -> Primary
              UnaryOperation Expression
              Expression BinaryOperation Expression
              id = Expression
              id . property = Expression
              id [ Expression ] = Expression // Maybe not?


Primary -> id
           id . property
           num
           ( Expression )
           id ( ExpressionList )
           id [ Expression ] // Maybe not ?

OptionalExpressionList -> epsilon
                          ExpressionList

ExpressionList -> Expression
                  Expression , ExpressionList


UnaryOperation -> - | !
BinaryOperation -> + | - | * | / | == | != | < | <= | > | >= | && | ||
